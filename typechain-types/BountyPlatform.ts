/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace BountyPlatform {
  export type MemberStruct = {
    id: PromiseOrValue<BigNumberish>;
    memberAdress: PromiseOrValue<string>;
  };

  export type MemberStructOutput = [BigNumber, string] & {
    id: BigNumber;
    memberAdress: string;
  };

  export type BountyStruct = {
    organisationId: PromiseOrValue<BigNumberish>;
    bountyId: PromiseOrValue<BigNumberish>;
    title: PromiseOrValue<string>;
    bountyCreator: PromiseOrValue<string>;
    descriptionGithubLink: PromiseOrValue<string>;
    bountyAmount: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    totalBounterHunters: PromiseOrValue<BigNumberish>;
    totalSubmittedWorks: PromiseOrValue<BigNumberish>;
  };

  export type BountyStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber
  ] & {
    organisationId: BigNumber;
    bountyId: BigNumber;
    title: string;
    bountyCreator: string;
    descriptionGithubLink: string;
    bountyAmount: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    status: number;
    totalBounterHunters: BigNumber;
    totalSubmittedWorks: BigNumber;
  };

  export type OrganisationStruct = {
    id: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    logoIPFS: PromiseOrValue<string>;
    creatorAddress: PromiseOrValue<string>;
    totalBountiesCreated: PromiseOrValue<BigNumberish>;
    totalAmountSpent: PromiseOrValue<BigNumberish>;
    totalMembers: PromiseOrValue<BigNumberish>;
  };

  export type OrganisationStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    name: string;
    logoIPFS: string;
    creatorAddress: string;
    totalBountiesCreated: BigNumber;
    totalAmountSpent: BigNumber;
    totalMembers: BigNumber;
  };

  export type SubmitWorkStruct = {
    submissionId: PromiseOrValue<BigNumberish>;
    organisationId: PromiseOrValue<BigNumberish>;
    bountyId: PromiseOrValue<BigNumberish>;
    participant: PromiseOrValue<string>;
    submissionLink: PromiseOrValue<string>;
    acceptanceStatus: PromiseOrValue<boolean>;
    earnings: PromiseOrValue<BigNumberish>;
  };

  export type SubmitWorkStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean,
    BigNumber
  ] & {
    submissionId: BigNumber;
    organisationId: BigNumber;
    bountyId: BigNumber;
    participant: string;
    submissionLink: string;
    acceptanceStatus: boolean;
    earnings: BigNumber;
  };
}

export interface BountyPlatformInterface extends utils.Interface {
  functions: {
    "acceptSubmissions(uint256,uint256,address)": FunctionFragment;
    "createAccount()": FunctionFragment;
    "createBounty(uint256,string,string,uint256,uint256)": FunctionFragment;
    "createOrganisation(string,string)": FunctionFragment;
    "deleteHunterSubmission(uint256,uint256)": FunctionFragment;
    "getAllBountiesCount()": FunctionFragment;
    "getBountyStatus(uint256,uint256)": FunctionFragment;
    "getMemberCount()": FunctionFragment;
    "getMembers()": FunctionFragment;
    "getOrganisation(uint256)": FunctionFragment;
    "getOrganisationBounties(uint256)": FunctionFragment;
    "getOrganisationMembers(uint256)": FunctionFragment;
    "getOrganisations()": FunctionFragment;
    "getSubmissionCount()": FunctionFragment;
    "getUserSubmission(uint256,uint256)": FunctionFragment;
    "joinBounty(uint256,uint256)": FunctionFragment;
    "joinOrganisation(uint256)": FunctionFragment;
    "payBountyWinners(uint256,uint256)": FunctionFragment;
    "removeBounty(uint256,uint256)": FunctionFragment;
    "removeOrganization(uint256)": FunctionFragment;
    "submitWork(uint256,uint256,string)": FunctionFragment;
    "updateSubmission(uint256,uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptSubmissions"
      | "createAccount"
      | "createBounty"
      | "createOrganisation"
      | "deleteHunterSubmission"
      | "getAllBountiesCount"
      | "getBountyStatus"
      | "getMemberCount"
      | "getMembers"
      | "getOrganisation"
      | "getOrganisationBounties"
      | "getOrganisationMembers"
      | "getOrganisations"
      | "getSubmissionCount"
      | "getUserSubmission"
      | "joinBounty"
      | "joinOrganisation"
      | "payBountyWinners"
      | "removeBounty"
      | "removeOrganization"
      | "submitWork"
      | "updateSubmission"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptSubmissions",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createBounty",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrganisation",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteHunterSubmission",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBountiesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBountyStatus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganisation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganisationBounties",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganisationMembers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganisations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmissionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubmission",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinBounty",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinOrganisation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payBountyWinners",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBounty",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOrganization",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitWork",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubmission",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptSubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBounty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrganisation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteHunterSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllBountiesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBountyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMembers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrganisation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganisationBounties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganisationMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganisations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmissionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinBounty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinOrganisation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payBountyWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBounty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSubmission",
    data: BytesLike
  ): Result;

  events: {
    "LogAcceptSubmission(uint256,uint256,address,bool)": EventFragment;
    "LogBounty(uint256,string,address,string,uint256,uint256,uint256)": EventFragment;
    "LogJoinBounty(uint256,uint256,address)": EventFragment;
    "LogMember(uint256,address)": EventFragment;
    "LogOrganisation(uint256,string,string,address,uint256,uint256,uint256)": EventFragment;
    "LogOrganisationMember(uint256,uint256,address)": EventFragment;
    "LogPayBountyWinners(uint256,uint256,uint256)": EventFragment;
    "LogSubmitWork(uint256,uint256,uint256,address,string,bool,uint256)": EventFragment;
    "LogUpdateSubmission(uint256,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAcceptSubmission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBounty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogJoinBounty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOrganisation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOrganisationMember"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPayBountyWinners"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSubmitWork"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdateSubmission"): EventFragment;
}

export interface LogAcceptSubmissionEventObject {
  organisationId: BigNumber;
  bountyId: BigNumber;
  hunterAddress: string;
  acceptanceStatus: boolean;
}
export type LogAcceptSubmissionEvent = TypedEvent<
  [BigNumber, BigNumber, string, boolean],
  LogAcceptSubmissionEventObject
>;

export type LogAcceptSubmissionEventFilter =
  TypedEventFilter<LogAcceptSubmissionEvent>;

export interface LogBountyEventObject {
  organisationId: BigNumber;
  title: string;
  bountyCreator: string;
  descriptionGithubLink: string;
  bountyAmount: BigNumber;
  startTime: BigNumber;
  endTIme: BigNumber;
}
export type LogBountyEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber],
  LogBountyEventObject
>;

export type LogBountyEventFilter = TypedEventFilter<LogBountyEvent>;

export interface LogJoinBountyEventObject {
  organisationId: BigNumber;
  bountyId: BigNumber;
  bountyHounterAddress: string;
}
export type LogJoinBountyEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  LogJoinBountyEventObject
>;

export type LogJoinBountyEventFilter = TypedEventFilter<LogJoinBountyEvent>;

export interface LogMemberEventObject {
  id: BigNumber;
  memberAdress: string;
}
export type LogMemberEvent = TypedEvent<
  [BigNumber, string],
  LogMemberEventObject
>;

export type LogMemberEventFilter = TypedEventFilter<LogMemberEvent>;

export interface LogOrganisationEventObject {
  id: BigNumber;
  name: string;
  logoIPFS: string;
  creatorAddress: string;
  totalBountiesCreated: BigNumber;
  totalAmountSpent: BigNumber;
  totalMembers: BigNumber;
}
export type LogOrganisationEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber],
  LogOrganisationEventObject
>;

export type LogOrganisationEventFilter = TypedEventFilter<LogOrganisationEvent>;

export interface LogOrganisationMemberEventObject {
  id: BigNumber;
  organizationId: BigNumber;
  memberAdress: string;
}
export type LogOrganisationMemberEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  LogOrganisationMemberEventObject
>;

export type LogOrganisationMemberEventFilter =
  TypedEventFilter<LogOrganisationMemberEvent>;

export interface LogPayBountyWinnersEventObject {
  organisationId: BigNumber;
  bountyId: BigNumber;
  amount: BigNumber;
}
export type LogPayBountyWinnersEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogPayBountyWinnersEventObject
>;

export type LogPayBountyWinnersEventFilter =
  TypedEventFilter<LogPayBountyWinnersEvent>;

export interface LogSubmitWorkEventObject {
  submissionId: BigNumber;
  organisationId: BigNumber;
  bountyId: BigNumber;
  participant: string;
  submissionLink: string;
  acceptanceStatus: boolean;
  earnings: BigNumber;
}
export type LogSubmitWorkEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, boolean, BigNumber],
  LogSubmitWorkEventObject
>;

export type LogSubmitWorkEventFilter = TypedEventFilter<LogSubmitWorkEvent>;

export interface LogUpdateSubmissionEventObject {
  organisationId: BigNumber;
  bountyId: BigNumber;
  submissionLink: string;
}
export type LogUpdateSubmissionEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  LogUpdateSubmissionEventObject
>;

export type LogUpdateSubmissionEventFilter =
  TypedEventFilter<LogUpdateSubmissionEvent>;

export interface BountyPlatform extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BountyPlatformInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptSubmissions(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      hunterAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBounty(
      organisationId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      descriptionGithubLink: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOrganisation(
      name: PromiseOrValue<string>,
      logoIPFS: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteHunterSubmission(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllBountiesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBountyStatus(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMemberCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMembers(
      overrides?: CallOverrides
    ): Promise<[BountyPlatform.MemberStructOutput[]]>;

    getOrganisation(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber] & {
        _id: BigNumber;
        name: string;
        logoIPFS: string;
        creator: string;
        totalBountiesCreated: BigNumber;
        totalAmountSpent: BigNumber;
        totalMembers: BigNumber;
      }
    >;

    getOrganisationBounties(
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BountyPlatform.BountyStructOutput[]]>;

    getOrganisationMembers(
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BountyPlatform.MemberStructOutput[]]>;

    getOrganisations(
      overrides?: CallOverrides
    ): Promise<[BountyPlatform.OrganisationStructOutput[]]>;

    getSubmissionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserSubmission(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BountyPlatform.SubmitWorkStructOutput]>;

    joinBounty(
      _bountyId: PromiseOrValue<BigNumberish>,
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    joinOrganisation(
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payBountyWinners(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeBounty(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeOrganization(
      _organizationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitWork(
      _bountyId: PromiseOrValue<BigNumberish>,
      _organisationId: PromiseOrValue<BigNumberish>,
      _submissionLink: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSubmission(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      _submissionLink: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptSubmissions(
    _organisationId: PromiseOrValue<BigNumberish>,
    _bountyId: PromiseOrValue<BigNumberish>,
    hunterAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAccount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBounty(
    organisationId: PromiseOrValue<BigNumberish>,
    title: PromiseOrValue<string>,
    descriptionGithubLink: PromiseOrValue<string>,
    startTime: PromiseOrValue<BigNumberish>,
    endTime: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOrganisation(
    name: PromiseOrValue<string>,
    logoIPFS: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteHunterSubmission(
    _organisationId: PromiseOrValue<BigNumberish>,
    _bountyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllBountiesCount(overrides?: CallOverrides): Promise<BigNumber>;

  getBountyStatus(
    _organisationId: PromiseOrValue<BigNumberish>,
    _bountyid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMemberCount(overrides?: CallOverrides): Promise<BigNumber>;

  getMembers(
    overrides?: CallOverrides
  ): Promise<BountyPlatform.MemberStructOutput[]>;

  getOrganisation(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber] & {
      _id: BigNumber;
      name: string;
      logoIPFS: string;
      creator: string;
      totalBountiesCreated: BigNumber;
      totalAmountSpent: BigNumber;
      totalMembers: BigNumber;
    }
  >;

  getOrganisationBounties(
    _organisationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BountyPlatform.BountyStructOutput[]>;

  getOrganisationMembers(
    _organisationId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BountyPlatform.MemberStructOutput[]>;

  getOrganisations(
    overrides?: CallOverrides
  ): Promise<BountyPlatform.OrganisationStructOutput[]>;

  getSubmissionCount(overrides?: CallOverrides): Promise<BigNumber>;

  getUserSubmission(
    _organisationId: PromiseOrValue<BigNumberish>,
    _bountyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BountyPlatform.SubmitWorkStructOutput>;

  joinBounty(
    _bountyId: PromiseOrValue<BigNumberish>,
    _organisationId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  joinOrganisation(
    _organisationId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payBountyWinners(
    _organisationId: PromiseOrValue<BigNumberish>,
    _bountyId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeBounty(
    _organisationId: PromiseOrValue<BigNumberish>,
    _bountyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeOrganization(
    _organizationId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitWork(
    _bountyId: PromiseOrValue<BigNumberish>,
    _organisationId: PromiseOrValue<BigNumberish>,
    _submissionLink: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSubmission(
    _organisationId: PromiseOrValue<BigNumberish>,
    _bountyId: PromiseOrValue<BigNumberish>,
    _submissionLink: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptSubmissions(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      hunterAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createAccount(overrides?: CallOverrides): Promise<void>;

    createBounty(
      organisationId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      descriptionGithubLink: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrganisation(
      name: PromiseOrValue<string>,
      logoIPFS: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteHunterSubmission(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllBountiesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getBountyStatus(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMemberCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMembers(
      overrides?: CallOverrides
    ): Promise<BountyPlatform.MemberStructOutput[]>;

    getOrganisation(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber] & {
        _id: BigNumber;
        name: string;
        logoIPFS: string;
        creator: string;
        totalBountiesCreated: BigNumber;
        totalAmountSpent: BigNumber;
        totalMembers: BigNumber;
      }
    >;

    getOrganisationBounties(
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BountyPlatform.BountyStructOutput[]>;

    getOrganisationMembers(
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BountyPlatform.MemberStructOutput[]>;

    getOrganisations(
      overrides?: CallOverrides
    ): Promise<BountyPlatform.OrganisationStructOutput[]>;

    getSubmissionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getUserSubmission(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BountyPlatform.SubmitWorkStructOutput>;

    joinBounty(
      _bountyId: PromiseOrValue<BigNumberish>,
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    joinOrganisation(
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payBountyWinners(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBounty(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOrganization(
      _organizationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitWork(
      _bountyId: PromiseOrValue<BigNumberish>,
      _organisationId: PromiseOrValue<BigNumberish>,
      _submissionLink: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSubmission(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      _submissionLink: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogAcceptSubmission(uint256,uint256,address,bool)"(
      organisationId?: null,
      bountyId?: null,
      hunterAddress?: PromiseOrValue<string> | null,
      acceptanceStatus?: null
    ): LogAcceptSubmissionEventFilter;
    LogAcceptSubmission(
      organisationId?: null,
      bountyId?: null,
      hunterAddress?: PromiseOrValue<string> | null,
      acceptanceStatus?: null
    ): LogAcceptSubmissionEventFilter;

    "LogBounty(uint256,string,address,string,uint256,uint256,uint256)"(
      organisationId?: null,
      title?: null,
      bountyCreator?: PromiseOrValue<string> | null,
      descriptionGithubLink?: null,
      bountyAmount?: null,
      startTime?: null,
      endTIme?: null
    ): LogBountyEventFilter;
    LogBounty(
      organisationId?: null,
      title?: null,
      bountyCreator?: PromiseOrValue<string> | null,
      descriptionGithubLink?: null,
      bountyAmount?: null,
      startTime?: null,
      endTIme?: null
    ): LogBountyEventFilter;

    "LogJoinBounty(uint256,uint256,address)"(
      organisationId?: null,
      bountyId?: null,
      bountyHounterAddress?: PromiseOrValue<string> | null
    ): LogJoinBountyEventFilter;
    LogJoinBounty(
      organisationId?: null,
      bountyId?: null,
      bountyHounterAddress?: PromiseOrValue<string> | null
    ): LogJoinBountyEventFilter;

    "LogMember(uint256,address)"(
      id?: null,
      memberAdress?: PromiseOrValue<string> | null
    ): LogMemberEventFilter;
    LogMember(
      id?: null,
      memberAdress?: PromiseOrValue<string> | null
    ): LogMemberEventFilter;

    "LogOrganisation(uint256,string,string,address,uint256,uint256,uint256)"(
      id?: null,
      name?: null,
      logoIPFS?: null,
      creatorAddress?: null,
      totalBountiesCreated?: null,
      totalAmountSpent?: null,
      totalMembers?: null
    ): LogOrganisationEventFilter;
    LogOrganisation(
      id?: null,
      name?: null,
      logoIPFS?: null,
      creatorAddress?: null,
      totalBountiesCreated?: null,
      totalAmountSpent?: null,
      totalMembers?: null
    ): LogOrganisationEventFilter;

    "LogOrganisationMember(uint256,uint256,address)"(
      id?: null,
      organizationId?: null,
      memberAdress?: PromiseOrValue<string> | null
    ): LogOrganisationMemberEventFilter;
    LogOrganisationMember(
      id?: null,
      organizationId?: null,
      memberAdress?: PromiseOrValue<string> | null
    ): LogOrganisationMemberEventFilter;

    "LogPayBountyWinners(uint256,uint256,uint256)"(
      organisationId?: null,
      bountyId?: null,
      amount?: null
    ): LogPayBountyWinnersEventFilter;
    LogPayBountyWinners(
      organisationId?: null,
      bountyId?: null,
      amount?: null
    ): LogPayBountyWinnersEventFilter;

    "LogSubmitWork(uint256,uint256,uint256,address,string,bool,uint256)"(
      submissionId?: null,
      organisationId?: null,
      bountyId?: null,
      participant?: PromiseOrValue<string> | null,
      submissionLink?: null,
      acceptanceStatus?: null,
      earnings?: null
    ): LogSubmitWorkEventFilter;
    LogSubmitWork(
      submissionId?: null,
      organisationId?: null,
      bountyId?: null,
      participant?: PromiseOrValue<string> | null,
      submissionLink?: null,
      acceptanceStatus?: null,
      earnings?: null
    ): LogSubmitWorkEventFilter;

    "LogUpdateSubmission(uint256,uint256,string)"(
      organisationId?: null,
      bountyId?: null,
      submissionLink?: null
    ): LogUpdateSubmissionEventFilter;
    LogUpdateSubmission(
      organisationId?: null,
      bountyId?: null,
      submissionLink?: null
    ): LogUpdateSubmissionEventFilter;
  };

  estimateGas: {
    acceptSubmissions(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      hunterAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBounty(
      organisationId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      descriptionGithubLink: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOrganisation(
      name: PromiseOrValue<string>,
      logoIPFS: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteHunterSubmission(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllBountiesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getBountyStatus(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMemberCount(overrides?: CallOverrides): Promise<BigNumber>;

    getMembers(overrides?: CallOverrides): Promise<BigNumber>;

    getOrganisation(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrganisationBounties(
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrganisationMembers(
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrganisations(overrides?: CallOverrides): Promise<BigNumber>;

    getSubmissionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getUserSubmission(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinBounty(
      _bountyId: PromiseOrValue<BigNumberish>,
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    joinOrganisation(
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payBountyWinners(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeBounty(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeOrganization(
      _organizationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitWork(
      _bountyId: PromiseOrValue<BigNumberish>,
      _organisationId: PromiseOrValue<BigNumberish>,
      _submissionLink: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSubmission(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      _submissionLink: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptSubmissions(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      hunterAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBounty(
      organisationId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      descriptionGithubLink: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOrganisation(
      name: PromiseOrValue<string>,
      logoIPFS: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteHunterSubmission(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllBountiesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBountyStatus(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMemberCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMembers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrganisation(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrganisationBounties(
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrganisationMembers(
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrganisations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubmissionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserSubmission(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinBounty(
      _bountyId: PromiseOrValue<BigNumberish>,
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    joinOrganisation(
      _organisationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payBountyWinners(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeBounty(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeOrganization(
      _organizationId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitWork(
      _bountyId: PromiseOrValue<BigNumberish>,
      _organisationId: PromiseOrValue<BigNumberish>,
      _submissionLink: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSubmission(
      _organisationId: PromiseOrValue<BigNumberish>,
      _bountyId: PromiseOrValue<BigNumberish>,
      _submissionLink: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
